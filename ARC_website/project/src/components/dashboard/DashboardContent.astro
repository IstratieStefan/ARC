---
import InfoCard from './InfoCard.astro';
import CircularProgress from './CircularProgress.astro';
---
<div>
  <h1 class="text-3xl font-bold mb-8">System Dashboard</h1>
  <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    <InfoCard title="Memory Usage" icon="…" value="–" subValue="–" color="arc-accent">
      <CircularProgress id="mem-chart" percentage={0} />
    </InfoCard>
    <!-- WiFi Strength -->
    <InfoCard title="WiFi Strength" icon="…" value="–" subValue="IP: –" color="arc-accent">
      <div id="wifi-bars" class="flex justify-center items-end space-x-1 h-16 mb-2"></div>
    </InfoCard>
    <!-- CPU Load -->
    <InfoCard title="CPU Load" icon="…" value="–" subValue="per core" color="arc-accent">
      <CircularProgress id="cpu-chart" percentage={0} />
    </InfoCard>
    <!-- Disk Usage -->
    <InfoCard title="Disk Usage" icon="…" value="–" subValue="–" color="arc-accent">
      <CircularProgress id="disk-chart" percentage={0} />
    </InfoCard>
    <!-- Uptime -->
    <InfoCard title="System Uptime" icon="…" value="–" subValue="" color="arc-accent">
      <p id="uptime-text" class="text-xl font-mono"></p>
    </InfoCard>
    <!-- Temperature -->
    <InfoCard title="CPU Temp" icon="…" value="–°C" subValue="" color="arc-accent">
      <CircularProgress id="temp-chart" percentage={0} />
    </InfoCard>
  </div>
</div>

<script is:inline client:load>
  const conn = JSON.parse(localStorage.getItem('arcConnection') || '{}');
  if (!conn.ip) {
    alert('Not connected – please connect first.');
    location.href = '/arc-connect';
    throw new Error('No connection');
  }

  const metricsUrl = `http://${conn.ip}:5001/metrics`;

  async function refresh() {
    try {
      const res = await fetch(metricsUrl);
      const m   = await res.json();

      // Memory
      const memPct = Math.round((m.memory.used / m.memory.total) * 100);
      document.querySelector('InfoCard[title="Memory Usage"] .value').textContent =
          `${m.memory.used} GB / ${m.memory.total} GB`;
      document.querySelector('InfoCard[title="Memory Usage"] .subValue').textContent =
          `${memPct}% used`;
      document.getElementById('mem-chart').update(memPct);

      // WiFi (just show IP)
      document.querySelector('InfoCard[title="WiFi Strength"] .subValue').textContent =
          `IP: ${conn.ip}`;
      // (for actual RSSI you'd SSH into `iwconfig` etc.)

      // CPU
      const cpuPct = Math.round((m.cpu.load / m.cpu.cores) * 100);
      document.querySelector('InfoCard[title="CPU Load"] .value').textContent =
          m.cpu.load.toFixed(2);
      document.getElementById('cpu-chart').update(cpuPct);

      // Disk
      const diskPct = Math.round((m.disk.used / m.disk.total) * 100);
      document.querySelector('InfoCard[title="Disk Usage"] .value').textContent =
          `${m.disk.used} GB / ${m.disk.total} GB`;
      document.getElementById('disk-chart').update(diskPct);

      // Uptime
      document.querySelector('InfoCard[title="System Uptime"] .value').textContent =
          m.uptime;
      document.getElementById('uptime-text').textContent = m.uptime;

      // Temp
      if (m.temp != null) {
        document.querySelector('InfoCard[title="CPU Temp"] .value').textContent =
            `${m.temp.toFixed(1)}°C`;
        document.getElementById('temp-chart').update(Math.round((m.temp/100)*100));
      } else {
        document.querySelector('InfoCard[title="CPU Temp"] .value').textContent = 'N/A';
      }
    } catch (e) {
      console.error('Could not fetch metrics', e);
    }
  }

  refresh();
  setInterval(refresh, 5000);
</script>
