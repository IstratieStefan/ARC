---
import Layout from '../layouts/Layout.astro';
import Hero from '../components/Hero';
---
<Layout title="ARC configuration">
    <Hero
            client:load
            title="ARC connect"
            subtitle="Connect your ARC device to the network"
            image="/Download.JPG"
    />
    <div class="max-w-xl mx-auto mt-20 mb-16 p-6 py-8 bg-gray-50 dark:bg-gray-900 rounded-lg shadow-md">
        <h2 class="text-2xl font-semibold text-gray-800 dark:text-white mb-4">Connect to ARC</h2>

        <form id="connectForm" class="space-y-4">
            <div>
                <label for="ip" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                    ARC IP:
                </label>
                <input
                        type="text"
                        id="ip"
                        name="ip"
                        placeholder="192.168.x.x"
                        class="w-full p-2 mb-4 mt-1 rounded border dark:border-gray-600 bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white"
                />
            </div>
            <div>
                <label for="user" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                    Username:
                </label>
                <input
                        type="text"
                        id="user"
                        name="user"
                        placeholder="Enter your username"
                        class="w-full p-2 mb-4 mt-1 rounded border dark:border-gray-600 bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white"
                />
            </div>
            <div>
                <label for="pass" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                    Password:
                </label>
                <div class="relative">
                    <input
                            type="password"
                            id="pass"
                            name="pass"
                            placeholder="Enter your password"
                            class="w-full p-2 mb-4 mt-1 rounded border dark:border-gray-600 bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white"
                    />
                    <button
                            type="button"
                            id="togglePassword"
                            class="absolute right-2 top-2 text-gray-500 hover:text-gray-800 dark:text-gray-400 dark:hover:text-white"
                    >
                        üëÅÔ∏è
                    </button>
                </div>
            </div>
            <button
                    type="submit"
                    class="w-full px-4 py-2 bg-accent hover:bg-accent-hover text-white rounded shadow transition"
            >
                Connect to ARC
            </button>
        </form>

        <div id="formError" class="text-red-600 dark:text-red-400 mb-2 text-sm"></div>
        <p id="status" class="mt-4 text-sm text-gray-700 dark:text-gray-300"></p>
    </div>

    <script>
        window.addEventListener('DOMContentLoaded', () => {
            const ipInput    = document.getElementById('ip');
            const userInput  = document.getElementById('user');
            const passInput  = document.getElementById('pass');
            const form       = document.getElementById('connectForm');
            const formError  = document.getElementById('formError');
            const statusEl   = document.getElementById('status');
            const toggleBtn  = document.getElementById('togglePassword');

            form.addEventListener('submit', e => {
                e.preventDefault();
                formError.textContent = '';
                statusEl.textContent  = '';

                const ip   = ipInput.value.trim();
                const user = userInput.value.trim();
                const pass = passInput.value;

                if (!ip || !user || !pass) {
                    formError.textContent = 'Please fill in all fields.';
                    return;
                }

                const scheme = window.location.protocol === 'https:' ? 'wss' : 'ws';
                let ws;
                try {
                    // connect to FastAPI‚Äôs SSH proxy endpoint
                    ws = new WebSocket(`${scheme}://${window.location.hostname}:8000/ws/ssh`);
                } catch (err) {
                    formError.textContent = '‚ùå Cannot connect to proxy server.';
                    console.error(err);
                    return;
                }

                ws.onopen = () => {
                    statusEl.textContent = 'üîå Connected to proxy, sending credentials‚Ä¶';
                    ws.send(JSON.stringify({
                        host:     ip,       // target ARC IP
                        port:     22,
                        username: user,
                        password: pass
                    }));
                };

                ws.onerror = err => {
                    formError.textContent = '‚ùå WebSocket error';
                    console.error('WS error:', err);
                };

                ws.onclose = () => {
                    if (!statusEl.textContent.startsWith('‚úÖ')) {
                        formError.textContent = '‚ùå Connection closed unexpectedly.';
                    }
                };

                ws.onmessage = ({ data }) => {
                    // any message back from FastAPI means auth & shell are live
                    statusEl.textContent = '‚úÖ SSH shell ready‚Äîredirecting to SSH UI‚Ä¶';
                    localStorage.setItem(
                        'arcConnection',
                        JSON.stringify({ ip, user, pass })
                    );
                    window.location.href = '/dashboard/ssh';
                };
            });

            toggleBtn.addEventListener('click', () => {
                passInput.type = passInput.type === 'password' ? 'text' : 'password';
            });
        });
    </script>
</Layout>
