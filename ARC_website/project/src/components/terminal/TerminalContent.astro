---
---

<!-- Embeds an Xterm.js‐powered SSH terminal for your ARC device -->
<div>
    <h1 class="text-3xl font-bold mb-8">SSH Terminal</h1>
    <div class="max-w-4xl">
        <div class="bg-arc-card rounded-2xl shadow-sm border border-gray-100 p-6">
            <div id="terminal-container" class="w-full h-[500px] rounded-lg bg-gray-900 overflow-hidden"></div>
        </div>
    </div>
</div>

<script is:inline client:load type="module">
    import { Terminal } from 'xterm';
    import { FitAddon } from 'xterm-addon-fit';
    import { WebLinksAddon } from 'xterm-addon-web-links';
    import 'xterm/css/xterm.css';

    let term;
    let ws;

    // Initialize the Xterm.js terminal
    function initTerminal() {
        const container = document.getElementById('terminal-container');
        if (!container) return;

        term = new Terminal({
            cursorBlink: true,
            fontSize: 14,
            fontFamily: 'Menlo, Monaco, "Courier New", monospace',
            theme: {
                background: '#1a1b26',
                foreground: '#a9b1d6',
                cursor: '#c0caf5'
            }
        });

        const fitAddon = new FitAddon();
        const webLinksAddon = new WebLinksAddon();
        term.loadAddon(fitAddon);
        term.loadAddon(webLinksAddon);

        term.open(container);
        fitAddon.fit();
        window.addEventListener('resize', () => fitAddon.fit());

        term.onData(data => {
            if (ws && ws.readyState === WebSocket.OPEN) {
                ws.send(JSON.stringify({ type: 'input', data }));
            }
        });
    }

    // Connect to your ARC via the WebSocket→Paramiko SSH proxy
    function connectArc() {
        const raw = localStorage.getItem('arcConnection');
        if (!raw) {
            term.write('\r\nNot connected – please run ARC Connect first.\r\n');
            return;
        }
        const { ip, user, pass } = JSON.parse(raw);
        const protocol = window.location.protocol === 'https:' ? 'wss' : 'ws';
        const wsUrl = `${protocol}://${ip}:5000`;

        ws = new WebSocket(wsUrl);

        ws.onopen = () => {
            term.write('\r\nConnecting to SSH…\r\n');
            ws.send(JSON.stringify({
                type:     'auth',
                host:     ip,
                port:     22,
                username: user,
                password: pass
            }));
        };

        ws.onmessage = ({ data }) => {
            const msg = JSON.parse(data);
            switch (msg.type) {
                case 'auth-success':
                    term.write('Authentication successful!\r\n');
                    break;
                case 'auth-failure':
                    term.write('Authentication failed.\r\n');
                    ws.close();
                    break;
                case 'output':
                    term.write(msg.data);
                    break;
                case 'error':
                    term.write(`[error] ${msg.message}\r\n`);
                    break;
            }
        };

        ws.onerror = () => term.write('\r\nWebSocket error\r\n');
        ws.onclose = () => term.write('\r\nConnection closed\r\n');
    }

    document.addEventListener('DOMContentLoaded', () => {
        initTerminal();
        connectArc();
    });
</script>
